#region Copyright Syncfusion Inc. 2001 - 2020
// Copyright Syncfusion Inc. 2001 - 2020. All rights reserved.
// Use of this code is subject to the terms of our license.
// A copy of the current license can be obtained at any time by e-mailing
// licensing@syncfusion.com. Any infringement will be prosecuted under
// applicable laws. 
#endregion
//using Common;
using Syncfusion.XlsIO;
using System;
using System.Collections.Generic;
using System.IO;
using Windows.Storage;
using Windows.Storage.Pickers;
using Windows.UI.Popups;
using Windows.UI.Xaml;
using Common;
using Windows.UI.Xaml.Controls;
using System.Reflection;
using System.Collections.ObjectModel;
using Windows.UI.Xaml.Media.Imaging;
// The Blank Page item template is documented at http://go.microsoft.com/fwlink/?LinkId=234238

namespace EssentialXlsIO
{
    /// <summary>
    /// An empty page that can be used on its own or navigated to within a Frame.
    /// </summary>
    public sealed partial class Filters : SampleLayout
    {
        ObservableCollection<IconList> iconsList = new ObservableCollection<IconList>();        
        public Filters()
        {
            this.InitializeComponent();            
            iconsList.Add(new IconList { IconName = "1", Icon = @"Images/CF_IS_RedCrossSymbol.png" });
            iconsList.Add(new IconList { IconName = "2", Icon = @"Images/CF_IS_YellowExclamationSymbol.png" });
            iconsList.Add(new IconList { IconName = "3", Icon = @"Images/CF_IS_GreenCheckSymbol.png" });
            iconsList.Add(new IconList { IconName = "NoIcon", Icon = @"Images/NoIcon.png" });
            
            iconId.ItemsSource = iconsList;
            if (Windows.Foundation.Metadata.ApiInformation.IsTypePresent("Windows.Phone.UI.Input.HardwareButtons"))
			{
                this.btnGenerateExcel.HorizontalAlignment = HorizontalAlignment.Center;
                this.grdMain.Padding = new Thickness(10, 0, 0, 0);
				this.textBox1.Text = "Click the button to view an Excel spreadsheet generated by Essential XlsIO. Please note that Microsoft Excel Viewer or Microsoft Excel is required to view the resultant document.";
			}
			else
            this.textBox1.Text = "Click the button to view an Excel spreadsheet generated by Essential XlsIO. Please note that Microsoft Excel Viewer or Microsoft Excel is required to view the resultant document.";

        }

        private void ComboBox_Loaded(object sender, RoutedEventArgs e)
        {
            // ... A List.
            List<string> data = new List<string>();
            data.Add("Custom Filter");
            data.Add("Text Filter");
            data.Add("DateTime Filter");
            data.Add("Dynamic Filter");
	        data.Add("Color Filter");
            data.Add("Icon Filter");
            data.Add("Advanced Filter");

            // ... Get the ComboBox reference.
            var comboBox = sender as ComboBox;

            // ... Assign the ItemsSource to the List.
            comboBox.ItemsSource = data;

            // ... Make the first item selected.
            comboBox.SelectedIndex = 0;

            // ... Make the first item selected.
            iconSetType.SelectedIndex = 0;

            // ... Make the first item selected.
            iconId.SelectedIndex = 0;
        }

        private void comboBox2_Loaded(object sender, RoutedEventArgs e)
        {
            // ... List of colors.
            List<string> data = new List<string>();
            data.Add("Red");
            data.Add("Blue");
            data.Add("Green");
            data.Add("Yellow");
            data.Add("Empty");

            // ... Get the ComboBox reference.
            var comboBox = sender as ComboBox;

            // ... Assign the ItemsSource to the List.
            comboBox.ItemsSource = data;

            // ... Make the first item selected.
            comboBox.SelectedIndex = 0;
        }

        private async void btnGenerateExcel_Click(object sender, RoutedEventArgs e)
        {                        
            #region Workbook initialization
            //New instance of XlsIO is created.[Equivalent to launching MS Excel with no workbooks open].
            //The instantiation process consists of two steps.

            ExcelEngine excelEngine = new ExcelEngine();
            IApplication application = excelEngine.Excel;

            application.DefaultVersion = ExcelVersion.Excel2013;

            Assembly assembly = typeof(Filters).GetTypeInfo().Assembly;
            string resourcePath;
            if (comboBox1.SelectedIndex == 6)
            {
                resourcePath = "Syncfusion.SampleBrowser.UWP.XlsIO.XlsIO.Tutorials.Samples.Assets.Resources.Templates.AdvancedFilterTemplate.xlsx";
            }
            else if (comboBox1.SelectedIndex == 5)
            {
                resourcePath = "Syncfusion.SampleBrowser.UWP.XlsIO.XlsIO.Tutorials.Samples.Assets.Resources.Templates.IconFilterData.xlsx";
            }
            else if (comboBox1.SelectedIndex == 4)
            {
                resourcePath = "Syncfusion.SampleBrowser.UWP.XlsIO.XlsIO.Tutorials.Samples.Assets.Resources.Templates.FilterData_Color.xlsx";
            }
            else
            {
                resourcePath = "Syncfusion.SampleBrowser.UWP.XlsIO.XlsIO.Tutorials.Samples.Assets.Resources.Templates.FilterData.xlsx";
            }
            Stream fileStream = assembly.GetManifestResourceStream(resourcePath);
            IWorkbook workbook = await application.Workbooks.OpenAsync(fileStream);
            //The first worksheet object in the worksheets collection is accessed.
            IWorksheet worksheet = workbook.Worksheets[0];
            worksheet.UsedRange.AutofitColumns();
            #endregion

            #region Save the Workbook
            StorageFile storageFile;
            if (!(Windows.Foundation.Metadata.ApiInformation.IsTypePresent("Windows.Phone.UI.Input.HardwareButtons")))
            {
                FileSavePicker savePicker = new FileSavePicker();
                savePicker.SuggestedStartLocation = PickerLocationId.Desktop;
                savePicker.SuggestedFileName = "DataTemplate";
                savePicker.FileTypeChoices.Add("Excel Files", new List<string>() { ".xlsx", });
                storageFile = await savePicker.PickSaveFileAsync();
            }
            else
            {
                StorageFolder local = Windows.Storage.ApplicationData.Current.LocalFolder;
                storageFile = await local.CreateFileAsync("DataTemplate.xlsx", CreationCollisionOption.ReplaceExisting);
            }


            if (storageFile != null)
            {
                //Saving the workbook
                await workbook.SaveAsAsync(storageFile);
                workbook.Close();
                excelEngine.Dispose();

                MessageDialog msgDialog = new MessageDialog("Do you want to view the Document?", "File has been saved successfully.");

                UICommand yesCmd = new UICommand("Yes");
                msgDialog.Commands.Add(yesCmd);
                UICommand noCmd = new UICommand("No");
                msgDialog.Commands.Add(noCmd);
                IUICommand cmd = await msgDialog.ShowAsync();
                if (cmd == yesCmd)
                {
                    // Launch the saved file
                    bool success = await Windows.System.Launcher.LaunchFileAsync(storageFile);
                }
            }
            else
            {
                workbook.Close();
                excelEngine.Dispose();
            }
            #endregion
        }
        private async void btnGenerateExcel_Click_2(object sender, RoutedEventArgs e)
        {
            #region Workbook initialization
            //New instance of XlsIO is created.[Equivalent to launching MS Excel with no workbooks open].
            //The instantiation process consists of two steps.

            ExcelEngine excelEngine = new ExcelEngine();
            IApplication application = excelEngine.Excel;

            application.DefaultVersion = ExcelVersion.Excel2013;

            Assembly assembly = typeof(Filters).GetTypeInfo().Assembly;
            string resourcePath;
            if (comboBox1.SelectedIndex == 6)
            {
                resourcePath = "Syncfusion.SampleBrowser.UWP.XlsIO.XlsIO.Tutorials.Samples.Assets.Resources.Templates.AdvancedFilterTemplate.xlsx";
            }
            else if (comboBox1.SelectedIndex == 5)
            {
                resourcePath = "Syncfusion.SampleBrowser.UWP.XlsIO.XlsIO.Tutorials.Samples.Assets.Resources.Templates.IconFilterData.xlsx";
            }
            else if (comboBox1.SelectedIndex == 4)
            {
                resourcePath = "Syncfusion.SampleBrowser.UWP.XlsIO.XlsIO.Tutorials.Samples.Assets.Resources.Templates.FilterData_Color.xlsx";
            }
            else
            {
                resourcePath = "Syncfusion.SampleBrowser.UWP.XlsIO.XlsIO.Tutorials.Samples.Assets.Resources.Templates.FilterData.xlsx";
            }
            Stream fileStream = assembly.GetManifestResourceStream(resourcePath);
            IWorkbook workbook = await application.Workbooks.OpenAsync(fileStream);
            #endregion

            #region sorting the data
            workbook.Version = ExcelVersion.Excel2007;
            IWorksheet sheet = workbook.Worksheets[0];
            if (comboBox1.SelectedIndex != 6)
            {
                sheet.AutoFilters.FilterRange = sheet.Range[1, 1, 49, 3];
            }
            string sortOn = comboBox1.SelectedValue as string;
            int columnIndex = GetSelectedIndex(sortOn);
            string fileName = "DataSortSample";
            switch (columnIndex)
            {
                case 0:
                    fileName = "CustomFilter";
                    IAutoFilter filter1 = sheet.AutoFilters[0];
                    filter1.IsAnd = false;
                    filter1.FirstCondition.ConditionOperator = ExcelFilterCondition.Equal;
                    filter1.FirstCondition.DataType = ExcelFilterDataType.String;
                    filter1.FirstCondition.String = "Owner";

                    filter1.SecondCondition.ConditionOperator = ExcelFilterCondition.Equal;
                    filter1.SecondCondition.DataType = ExcelFilterDataType.String;
                    filter1.SecondCondition.String = "Sales Representative";
                    break;

                case 1:
                    fileName = "TextFilter";
                    IAutoFilter filter2 = sheet.AutoFilters[0];
                    filter2.AddTextFilter(new string[] { "Owner", "Sales Representative", "Sales Associate" });
                    break;

                case 2:
                    fileName = "DateTimeFilter";
                    IAutoFilter filter3 = sheet.AutoFilters[1];
                    filter3.AddDateFilter(new DateTime(2004, 9, 1, 1, 0, 0, 0), DateTimeGroupingType.month);
                    filter3.AddDateFilter(new DateTime(2011, 1, 1, 1, 0, 0, 0), DateTimeGroupingType.year);
                    break;

                case 3:
                    fileName = "DynamicFilter";
                    IAutoFilter filter4 = sheet.AutoFilters[1];
                    filter4.AddDynamicFilter(DynamicFilterType.Quarter1);
                    break;

                case 4:
                    fileName = "ColorFilter";
                    #region ColorFilter
                    sheet.AutoFilters.FilterRange = sheet["A1:C49"];
                    Windows.UI.Color color = new Windows.UI.Color();
                    switch(comboBox2.SelectedIndex)
                    {
                        case 0:
                            color = Windows.UI.Color.FromArgb(255, 255, 0, 0);
                            break;
                        case 1:
                            color = Windows.UI.Color.FromArgb(255, 0, 0, 255);
                            break;
                        case 2:
                            color = Windows.UI.Color.FromArgb(255, 0, 128, 0);
                            break;
                        case 3:
                            color = Windows.UI.Color.FromArgb(255, 255, 255, 0);
                            break;
                        case 4:
                            //do nothing
                            break;
                    }

                    if(rdb3.IsChecked == true)
                    {
                        IAutoFilter filter = sheet.AutoFilters[2];
                        filter.AddColorFilter(color, ExcelColorFilterType.FontColor);
                    }
                    else
                    {
                        IAutoFilter filter = sheet.AutoFilters[0];
                        filter.AddColorFilter(color, ExcelColorFilterType.CellColor);
                    }
                    #endregion
                    break;

                case 5:
                    fileName = "IconFilter";
                    #region IconFilter
                    sheet.AutoFilters.FilterRange = sheet["A4:D44"];
                    ExcelIconSetType iconSet = ExcelIconSetType.FiveArrows;
                    int icon = 0;
                    int filterIndex = 0;
                    switch(iconSetType.SelectedIndex)
                    {
                        case 0:
                            iconSet = ExcelIconSetType.ThreeSymbols;
                            filterIndex = 3;
                            break;
                        case 1:
                            iconSet = ExcelIconSetType.FourRating;
                            filterIndex = 1;
                            break;
                        case 2:
                            iconSet = ExcelIconSetType.FiveArrows;
                            filterIndex = 2;
                            break;
                    }
                    switch (iconId.SelectedIndex)
                    {
                        case 0:
                            //Do nothing
                            break;
                        case 1:
                            icon = 1;
                            break;
                        case 2:
                            icon = 2;
                            break;
                        case 3:
                            if (iconSetType.SelectedIndex == 0)
                                iconSet = (ExcelIconSetType)(-1);
                            else
                                icon = 3;
                            break;
                        case 4:
                            if (iconSetType.SelectedIndex == 1)
                                iconSet = (ExcelIconSetType)(-1);
                            else
                                icon = 4;
                            break;
                        case 5:
                            iconSet = (ExcelIconSetType)(-1);
                            break;
                    }
                    IAutoFilter filter5 = sheet.AutoFilters[filterIndex];
                    filter5.AddIconFilter(iconSet, icon);

                    #endregion
                    break;

                case 6:
                    fileName = "AdvancedFilter";
                    #region AdvancedFilter

                    IRange filterRange = sheet.Range["A8:G51"];
                    IRange criteriaRange = sheet.Range["A2:B5"];
                    if (rdb1.IsChecked==true)
                    {
                        sheet.AdvancedFilter(ExcelFilterAction.FilterInPlace, filterRange, criteriaRange, null, checkbox1.IsChecked == true);
                    }
                    else if (rdb2.IsChecked==true)
                    {
                        IRange range = sheet.Range["I7:O7"];
                        range.Merge();
                        range.Text = "FilterCopy";
                        range.CellStyle.Font.RGBColor = Windows.UI.Color.FromArgb(0,0, 112, 192);
                        range.HorizontalAlignment = ExcelHAlign.HAlignCenter;
                        range.CellStyle.Font.Bold = true;
                        IRange copyRange = sheet.Range["I8"];
                        sheet.AdvancedFilter(ExcelFilterAction.FilterCopy, filterRange, criteriaRange, copyRange, checkbox1.IsChecked == true);
                    }
                    break;
                    #endregion
            }
            #endregion


            #region Save the Workbook
            StorageFile storageFile;
            if (!(Windows.Foundation.Metadata.ApiInformation.IsTypePresent("Windows.Phone.UI.Input.HardwareButtons")))
            {
                FileSavePicker savePicker = new FileSavePicker();
                savePicker.SuggestedStartLocation = PickerLocationId.Desktop;
                savePicker.SuggestedFileName = fileName;
                savePicker.FileTypeChoices.Add("Excel Files", new List<string>() { ".xlsx", });
                storageFile = await savePicker.PickSaveFileAsync();
            }
            else
            {
                StorageFolder local = Windows.Storage.ApplicationData.Current.LocalFolder;
                storageFile = await local.CreateFileAsync(fileName + ".xlsx", CreationCollisionOption.ReplaceExisting);
            }


            if (storageFile != null)
            {
                //Saving the workbook
                await workbook.SaveAsAsync(storageFile);
                workbook.Close();
                excelEngine.Dispose();

                MessageDialog msgDialog = new MessageDialog("Do you want to view the Document?", "File has been saved successfully.");

                UICommand yesCmd = new UICommand("Yes");
                msgDialog.Commands.Add(yesCmd);
                UICommand noCmd = new UICommand("No");
                msgDialog.Commands.Add(noCmd);
                IUICommand cmd = await msgDialog.ShowAsync();
                if (cmd == yesCmd)
                {
                    // Launch the saved file
                    bool success = await Windows.System.Launcher.LaunchFileAsync(storageFile);
                }
            }
            else
            {
                workbook.Close();
                excelEngine.Dispose();
            }
            #endregion

        }
        #region Helper Methods
        private int GetSelectedIndex(string value)
        {
            switch (value)
            {
                case "Custom Filter": return 0;
                case "Text Filter": return 1;
                case "DateTime Filter": return 2;
                case "Dynamic Filter": return 3;
                case "Color Filter": return 4;
                case "Icon Filter": return 5;
                case "Advanced Filter": return 6;
                default: return 0;
            }
        }
        #endregion

        #region Dispose
        public override void Dispose()
        {
            base.Dispose();

            UnlinkChildrens(grdMain);
            DisposeTextBlock(textBox1);
            textBox1 = null;
            DisposeTextBlock(textBox2);
            textBox2 = null;
            DisposeTextBlock(textBox3);
            textBox3 = null;
            DisposeTextBlock(textBox4);
            textBox4 = null;
            DisposeTextBlock(textBox5);
            textBox5 = null;
            DisposeTextBlock(textBox6);
            textBox6 = null;
            DisposeTextBlock(txtBlock4);
            txtBlock4 = null;

            DisposeButton(btnGenerateExcel);
            btnGenerateExcel.Click -= btnGenerateExcel_Click;
            btnGenerateExcel = null;
            DisposeButton(btnGenerateExcel_1);
            btnGenerateExcel_1.Click -= btnGenerateExcel_Click_2;
            btnGenerateExcel_1 = null;       

            DisposeStackPanel(stackPnlOptions);
            stackPnlOptions = null;

            DisposeStackPanel(stackPnlOptions_1);
            stackPnlOptions = null;

            comboBox1 = null;

            DisposeGrid(grd1);
            grd1 = null;

            DisposeGrid(grd2);
            grd2 = null;

            DisposeGrid(grdMain);
            grdMain = null;
        }

        private void DisposeTextBlock(TextBlock textBlock)
        {
            if (textBlock == null)
                return;
            textBlock.ClearValue(TextBlock.FontFamilyProperty);
            textBlock.ClearValue(TextBlock.FontSizeProperty);
            textBlock.ClearValue(TextBlock.TextProperty);
            textBlock.ClearValue(TextBlock.TextWrappingProperty);
            textBlock.ClearValue(TextBlock.ForegroundProperty);
        }

        private void DisposeButton(Button button)
        {
            if (button == null)
                return;
            button.ClearValue(Button.FontFamilyProperty);
            button.ClearValue(Button.FontSizeProperty);
            button.ClearValue(Button.PaddingProperty);
            button.ClearValue(Button.ForegroundProperty);
            button.ClearValue(Button.BackgroundProperty);
            button.ClearValue(Button.ContentProperty);
            button.ClearValue(Button.HeightProperty);
            button.ClearValue(Button.WidthProperty);            
        }

        private void DisposeRadioButton(RadioButton radioButton)
        {
            if (radioButton == null)
                return;
            radioButton.ClearValue(RadioButton.GroupNameProperty);
            radioButton.ClearValue(RadioButton.ContentProperty);
            radioButton.ClearValue(RadioButton.FontFamilyProperty);
            radioButton.ClearValue(RadioButton.FontSizeProperty);
            radioButton.ClearValue(RadioButton.ForegroundProperty);
            radioButton.ClearValue(RadioButton.WidthProperty);
            radioButton.ClearValue(RadioButton.IsCheckedProperty);
        }

        private void DisposeStackPanel(StackPanel stackPanel)
        {
            if (stackPanel == null)
                return;
            stackPanel.ClearValue(StackPanel.OrientationProperty);
            stackPanel.ClearValue(StackPanel.HorizontalAlignmentProperty);
        }

        private void DisposeGrid(Grid grid)
        {
            if (grid == null)
                return;
            grid.ClearValue(Grid.BackgroundProperty);
            grid.ClearValue(Grid.MarginProperty);
            grid.ColumnDefinitions.Clear();
            grid.RowDefinitions.Clear();
        }

        void UnlinkChildrens(UIElement element)
        {
            if (element == null)
                return;
            if (element is Panel)
            {
                for (int i = 0; i < (element as Panel).Children.Count; i++)
                {
                    UIElement childElement = (element as Panel).Children[i];
                    UnlinkChildrens(childElement);
                    (element as Panel).Children.Remove(childElement);
                    i--;
                }
            }
            else if (element is ItemsControl)
            {
                for (int j = 0; j < (element as ItemsControl).Items.Count; j++)
                {
                    UIElement childElement = ((element as ItemsControl).Items[j] as UIElement);
                    if (childElement == null)
                    {
                        //(element as ItemsControl).Items.RemoveAt(j);
                        //j--;
                    }
                    else
                    {
                        UnlinkChildrens(childElement);
                        (element as ItemsControl).Items.Remove(childElement);
                        j--;
                    }
                }
            }
            else if (element is ContentControl)
            {
                UnlinkChildrens((element as ContentControl).Content as UIElement);
                (element as ContentControl).Content = null;
            }
            else if (element is UserControl)
            {
                UnlinkChildrens((element as UserControl).Content as UIElement);
                (element as UserControl).Content = null;
            }
        }
        #endregion

        private void comboBox1_SelectionChanged(object sender, SelectionChangedEventArgs e)
        {
            if(comboBox1.SelectedIndex==6)
            {
                actionType.Visibility = Visibility.Visible;
                colorFilterType.Visibility = Visibility.Collapsed;
                iconFilterType.Visibility = Visibility.Collapsed;
            }
            else if(comboBox1.SelectedIndex == 5)
            {
                actionType.Visibility = Visibility.Collapsed;
                colorFilterType.Visibility = Visibility.Collapsed;
                iconFilterType.Visibility = Visibility.Visible;
            }
            else if(comboBox1.SelectedIndex == 4)
            {
                actionType.Visibility = Visibility.Collapsed;
                colorFilterType.Visibility = Visibility.Visible;
                iconFilterType.Visibility = Visibility.Collapsed;
                rdb3.IsChecked = true;
            }
            else
            {
                checkbox1.IsChecked = false;
                rdb1.IsChecked = true;
                actionType.Visibility = Visibility.Collapsed;
                colorFilterType.Visibility = Visibility.Collapsed;
                iconFilterType.Visibility = Visibility.Collapsed;
            }
        }

        private void IconSetChanged(object sender, SelectionChangedEventArgs e)
        {
            if ((sender as ComboBox).SelectedIndex == 0)
            {
                iconsList.Clear();
                iconsList.Add(new IconList { IconName = "1", Icon = @"Images/CF_IS_RedCrossSymbol.png" });
                iconsList.Add(new IconList { IconName = "2", Icon = @"Images/CF_IS_YellowExclamationSymbol.png" });
                iconsList.Add(new IconList { IconName = "3", Icon = @"Images/CF_IS_GreenCheckSymbol.png" });
                iconsList.Add(new IconList { IconName = "NoIcon", Icon = @"Images/NoIcon.png" });
            }
            else if ((sender as ComboBox).SelectedIndex == 1)
            {
                iconsList.Clear();
                iconsList.Add(new IconList { IconName = "1", Icon = @"Images/CF_IS_SignalWithOneFillBar.png" });
                iconsList.Add(new IconList { IconName = "2", Icon = @"Images/CF_IS_SignalWithTwoFillBars.png" });
                iconsList.Add(new IconList { IconName = "3", Icon = @"Images/CF_IS_SignalWithThreeFillBars.png" });
                iconsList.Add(new IconList { IconName = "4", Icon = @"Images/CF_IS_SignalWithFourFillBars.png" });
                iconsList.Add(new IconList { IconName = "NoIcon", Icon = @"Images/NoIcon.png" });
            }
            else
            {
                iconsList.Clear();
                iconsList.Add(new IconList { IconName = "1", Icon = @"Images/CF_IS_RedDownArrow.png" });
                iconsList.Add(new IconList { IconName = "2", Icon = @"Images/CF_IS_YellowDownInclineArrow.png" });
                iconsList.Add(new IconList { IconName = "3", Icon = @"Images/CF_IS_YellowSideArrow.png" });
                iconsList.Add(new IconList { IconName = "4", Icon = @"Images/CF_IS_YellowUpInclineArrow.png" });
                iconsList.Add(new IconList { IconName = "5", Icon = @"Images/CF_IS_GreenUpArrow.png" });
                iconsList.Add(new IconList { IconName = "NoIcon", Icon = @"Images/NoIcon.png" });
            }
            iconId.SelectedIndex = 0; 
        }
    }
    public class IconList
    {
        Windows.UI.Xaml.Controls.Image image = new Windows.UI.Xaml.Controls.Image();
        
        public string IconName { get; set; }
        public string Icon { get; set; }
    }


}
